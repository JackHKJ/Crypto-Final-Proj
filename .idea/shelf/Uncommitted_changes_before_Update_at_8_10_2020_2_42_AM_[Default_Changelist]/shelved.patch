Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nfrom KEYgen import ECCsrv\r\nfrom Algorithms import *\r\nfrom ECCryp import *\r\nfrom ElGamal import *\r\nfrom MACer import *\r\nfrom IntegratedEnDecryptor import *\r\n\"\"\"\r\nSSL handshake protocol\r\n1. client: Choice of 'ECC', 'DES', 'ELG'\r\n2. server: nonce\r\n3. client: nonce+4\r\n4. server: nonce+2\r\n5. client: E(nonce+5)\r\n6. server: E(secret)\r\n7. client: Esec(message)\r\n\"\"\"\r\n\r\n\r\nen_method = \"ELG\"\r\n# KEYS GOES HERE, TESTING ONLY!!!\r\npri, pub = 17266110910292182863031101798374952031947451314643790344773650325784057863506, \\\r\n           (63418887483913902302210242333028958573736406591311866468970740733910330138582,\r\n            100732508251634749738002515251900185798485578709518688083838565500932099246055)\r\n\r\nsecret = 'hello'\r\nbalance = 100.00\r\nserver = socket.socket()\r\nhost = socket.gethostname()\r\nport = 8808\r\nserver.bind((host, port))\r\nserver.listen(5)\r\nr_message = \"\"\r\nconnect, addr = server.accept()\r\nprint(\"address: \", addr)\r\n\r\n\r\nr_cipher = connect.recv(1024).decode()\r\nr_message = koblitz_de_str(r_cipher, pri)\r\nen_method = r_message\r\nnce = nonce_new(en_method)\r\ns_cipher = koblitz_en_str(nce, pub)\r\nconnect.send(s_cipher.encode())\r\nr_cipher = connect.recv(1024).decode()\r\nr_message = koblitz_de_str(r_cipher, pri)\r\ntmpnce = nce\r\nfor i in range(4):\r\n    tmpnce = nonce_inc(tmpnce)\r\nif tmpnce != r_message:\r\n    print(\"Handshake failed! @nce Closing connection {}\".format(addr))\r\n    connect.close()\r\n    exit()\r\nnce = nonce_inc(nce)\r\ntmpnce = nonce_inc(nce)\r\ntclnt = koblitz_en_str(nce, pub)\r\ncheckp = koblitz_en(tmpnce, pub)\r\n##\r\nconnect.send(tclnt.encode())\r\nr_cipher = connect.recv(10240).decode()\r\n\r\nr_message = to_string(r_cipher)\r\nif r_message != tmpnce:\r\n    print(r_cipher, checkp)\r\n    print(\"Handshake failed! @dec Closing connection {}\".format(addr))\r\n    connect.close()\r\n    exit()\r\n\r\n# generating key pairs for encryption\r\nif en_method == \"ELG\":\r\n    SERVER_ENCKEY, CLIENT_DECKEY = KeyGen()\r\n    CLIENT_ENCKEY, SERVER_DECKEY = KeyGen()\r\n    s_message = str(CLIENT_ENCKEY[0]) + \",\" + str(CLIENT_ENCKEY[1]) + \",\" + str(CLIENT_ENCKEY[2]) + \",\" + \\\r\n                str(CLIENT_DECKEY[0]) + \",\" + str(CLIENT_DECKEY[1]) + \",\" + str(CLIENT_DECKEY[2]) + \",\"\r\nelif en_method == \"DES\":\r\n    SERVER_ENCKEY = CLIENT_DECKEY = keygen()\r\n    CLIENT_ENCKEY = SERVER_DECKEY = keygen()\r\n    s_message = str(CLIENT_ENCKEY[0]) + \",\" + str(CLIENT_ENCKEY[1]) + \",\" + \\\r\n                str(CLIENT_DECKEY[0]) + \",\" + str(CLIENT_DECKEY[1]) + \",\"\r\nelif en_method == \"ECC\":\r\n    CLIENT_DECKEY, SERVER_ENCKEY = make_keypair()\r\n    SERVER_DECKEY, CLIENT_ENCKEY = make_keypair()\r\n    s_message = str(CLIENT_ENCKEY[0]) + \",\" + str(CLIENT_ENCKEY[1][0]) + \",\" + str(CLIENT_ENCKEY[1][1]) + \",\" + \\\r\n                str(CLIENT_DECKEY[0]) + \",\" + str(CLIENT_DECKEY[1][0]) + \",\" + str(CLIENT_DECKEY[1][1]) + \",\"\r\nMAC_KEY = random.randint(2**62, 2**63)\r\n\r\ns_message += str(MAC_KEY)\r\ns_cipher = koblitz_en_str(to_binary(s_message), pub)\r\nconnect.send(s_cipher.encode())\r\n\r\n# sec1 = str(CLIENT_DECKEY)\r\n# sec1 = koblitz_en(sec1, pub)\r\n# print(sec1)\r\n# connect.send(sec1.encode())\r\n# sec2 = str(CLIENT_ENCKEY)\r\n# sec2 = koblitz_en(sec2, pub)\r\n# connect.send(sec1.encode())\r\n# sec3 = str(MAC_KEY)\r\n# sec3 = koblitz_en(sec3, pub)\r\n# connect.send(sec1.encode())\r\n\r\nprint(\"SSL handshake complete\")\r\n\r\n\r\nwhile r_message != \"exit\":\r\n    r_cipher = connect.recv(10240).decode()\r\n    r_message = to_string(r_cipher)\r\n    r_message = decryptor(en_method, r_message, MAC_KEY, SERVER_DECKEY)\r\n    print(\"<<<\", r_message)\r\n    \r\n    command = r_message.split()\r\n    s_message = \"\"\r\n    if command[0] == \"deposit\":\r\n        if len(command) != 2:\r\n            s_message = \"Invalid command!\\nSee commands using \\\"help\\\"\"\r\n        elif command[1].isnumeric():\r\n            balance += float(command[1])\r\n            s_message = \"Successfully deposited ${}\".format(command[1])\r\n    elif command[0] == \"withdraw\":\r\n        if len(command) != 2:\r\n            s_message = \"Invalid command!\\nthe right format should be: withdraw {amount}\"\r\n        elif command[1].isnumeric():\r\n            if float(command[1]) > balance:\r\n                s_message = \"Not enough balance!\".format(command[1])\r\n            else:\r\n                balance -= float(command[1])\r\n                s_message = \"Successfully withdrew ${}\".format(command[1])\r\n        else:\r\n            s_message = \"Invalid command!\\nthe amount should be a number\"\r\n    elif command[0] == \"balance\":\r\n        s_message = \"Balance: ${}\".format(balance)\r\n    elif command[0] == \"hello\":\r\n        s_message = \"hello\"\r\n    elif command[0] == \"exit\":\r\n        s_message = \"Goodbye!\"\r\n    elif command[0] == \"help\":\r\n        s_message = \"Deposit: deposit {amount}\\n\" \\\r\n                    \"Withdraw: withdraw {amount}\\n\" \\\r\n                    \"Check Balance: balance\\n\" \\\r\n                    \"Exit: exit\"\r\n    else:\r\n        s_message = \"Invalid command!\\nSee commands using \\\"help\\\"\"\r\n    # encrypt here\r\n    print(\"sending message: \"+s_message)\r\n    s_cipher = encryptor(en_method, s_message, MAC_KEY, SERVER_ENCKEY)\r\n    connect.send(s_cipher.encode())\r\nconnect.close()\r\nserver.close()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- server.py	(revision 510be7965914720463c02818543a520d7ed72d70)
+++ server.py	(date 1597041665018)
@@ -79,8 +79,7 @@
 elif en_method == "ECC":
     CLIENT_DECKEY, SERVER_ENCKEY = make_keypair()
     SERVER_DECKEY, CLIENT_ENCKEY = make_keypair()
-    s_message = str(CLIENT_ENCKEY[0]) + "," + str(CLIENT_ENCKEY[1][0]) + "," + str(CLIENT_ENCKEY[1][1]) + "," + \
-                str(CLIENT_DECKEY[0]) + "," + str(CLIENT_DECKEY[1][0]) + "," + str(CLIENT_DECKEY[1][1]) + ","
+    s_message = str(CLIENT_ENCKEY[0][0]) + "," + str(CLIENT_ENCKEY[0][1]) + "," + str(CLIENT_DECKEY)
 MAC_KEY = random.randint(2**62, 2**63)
 
 s_message += str(MAC_KEY)
